plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'distribution'
}

jacoco {
    toolVersion = "0.8.7"
//    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.projectreactor:reactor-core:3.4.9'
    testImplementation 'io.projectreactor:reactor-test:3.4.9'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'com.ginsberg:junit5-system-exit:1.1.1'
}

apply plugin : 'java'
ext {
    javaMainClass = 'tran.billy.code.challenge.App'
}

application {
    mainClass = 'tran.billy.code.challenge.App'
    applicationName = 'helpdesk'
}

test {
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
    useJUnitPlatform()
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['tran.billy.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}